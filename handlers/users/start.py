import asyncio
import datetime
import random
from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from data.config import ADMINS
from keyboards.inline.all_inlines import *
from keyboards.default.all_defaults import *
from keyboards.tests import test_uz, test_ru
from loader import dp
from states.all_states import *
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import MessageToDeleteNotFound

from utils.notify_admins import on_startup_notify

print('###################33')
@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer(
            f"Assalamu alaykum, {message.from_user.full_name}!\n\nMARS ITSchoolning sales botiga xush kelibsiz!\nTillardan birini tanlang\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ sales bot –æ—Ç Mars IT School!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —è–∑—ã–∫–æ–≤:",
            reply_markup=langs)


async def save_message_id(state: FSMContext, message: types.Message):
    async with state.proxy() as data:
        if 'message_ids' not in data:
            data['message_ids'] = []
        data['message_ids'].append(message.message_id)


@dp.callback_query_handler(text='uz', state=None)
async def uz_state_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    reply = await call.message.answer("Testni boshlash uchun iltimos, telefon raqamingizni kiritingüì±\n\n",
                                    reply_markup=phone_uz)
    await save_message_id(state, reply)
    await RegState.phone.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=RegState.phone)
async def uz_phone_state(message: types.Message, state=FSMContext):
    phone = message.contact.phone_number

    await state.update_data(
        {'phone': phone}
    )
    reply = await message.answer("Farzandingizning ism-familiyasiüë®‚Äçüë®‚Äçüëß \n\n", reply_markup=ReplyKeyboardRemove())
    await save_message_id(state, reply)
    await save_message_id(state, message)
    await RegState.next()


@dp.message_handler(state=RegState.fullname)
async def us_fullname_state(message: types.Message, state=FSMContext):
    fullname = message.text

    await state.update_data(
        {'full_name': fullname}
    )
    reply = await message.answer("Farzandingizning yoshiüë´ \n\nMisol uchun 14\n")
    await save_message_id(state, reply)
    await save_message_id(state, message)
    await RegState.age.set()


@dp.message_handler(state=RegState.age)
async def us_fullname_state(message: types.Message, state=FSMContext):
    try:
        age = int(message.text)

        await state.update_data(
            {'age': age
            }
        )
        await save_message_id(state, message)

        data = await state.get_data()
        phone = data.get('phone')
        full_name = data.get('full_name')
        age = data.get('age')

        await state.reset_state(with_data=False)
        
        message_ids = data.get('message_ids', [])
        for message_id in message_ids:
            try:
                await dp.bot.delete_message(message.from_user.id, message_id)
            except Exception as e:
                print(f"Xabarni o'chirishda xato: {e}")
        await message.answer("Ro‚Äôyxatdan o‚Äôtganingiz uchun raxmat! üòä")
        await message.answer(f"Telefon raqam: {phone}\n\nIsm familiya: {full_name}\n\nYosh: {age}")

        await message.answer_photo(
            photo="AgACAgIAAxkBAAIIIGYFEeXP2H0XOmOusUutrf0DQptxAAI71TEbfGQpSBomsz22M-_jAQADAgADcwADNAQ",
            caption="Farzandingiz  qaysi yo‚Äônalishda qobiliyati kuchli ekanligini bilishni xohlaysizmi?ü§î\n\n",
            reply_markup=start_test_uz)


    except Exception as e:
        print(e)
        await message.answer("Itimos raqam kiriting:\n\nMisol uchun 14")


@dp.callback_query_handler(text='start_test_uz', state=None)
async def start_test_uz_handler(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(TestState.waiting_for_answer)
    await state.update_data(current_question_index=0, answers=[])
    await call.message.delete()
    await send_question(call.message, state, answers=None, id=call.from_user.id)


async def send_question(message: types.Message, state: FSMContext, answers: list, id):
    user_data = await state.get_data()
    current_question_index = user_data.get("current_question_index", 0)
    questions = list(test_uz.keys())

    if current_question_index < len(questions):
        question = questions[current_question_index]
        options = test_uz[question]

        markup = InlineKeyboardMarkup()
        for option, value in options.items():
            callback_data = f"answer_{current_question_index}_{value}"
            markup.add(InlineKeyboardButton(option, callback_data=callback_data))

        await message.answer(f"{current_question_index + 1}-savol \n\n{question}\n\n", reply_markup=markup)
    else:
        await state.reset_state(with_data=False)

        categories = {'Dizayn': 0, 'Frontend': 0, 'Backend': 0, 'Fullstack': 0}
        for answer in answers:
            for value in answer.values():
                if value in categories:
                    categories[value] += 1

        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        results_message = """Siz testni muvaffaqiyatli yakunladingizü•≥

Natijalaringiz asosida quyidagi kurslar siz uchun eng mos keladi:\n\n"""
        result = ""
        a = 95
        b = 100
        for category, count in sorted_categories:
            result += f"{category}:{count}ta,"

        await state.update_data(
            {'result': result}
        )

        for category, count in sorted_categories:
            if category == "Backend":
                results_message += f"‚öôÔ∏è {category} dasturchi - {random.randint(a, b)}%\n\n"
            elif category == "Frontend":
                results_message += f"üíª {category} dasturchi - {random.randint(a, b)}%\n\n"
            elif category == "Fullstack":
                results_message += f"üòé {category} dasturchi  (backend + Frontend) - {random.randint(a, b)}%\n\n"
            elif category == "Dizayn":
                results_message += f"üßë‚Äçüé®Grafik dizayner - {random.randint(a, b)}%\n\n"

            a -= 5
            b -= 5

        # Natijalarni foydalanuvchiga yuborish
        await message.answer_photo(
            photo="AgACAgIAAxkBAAIIImYFEpV7blhrRZg1PYGkjVMn-ajaAAI91TEbfGQpSCTfeMCLWVVBAQADAgADcwADNAQ",
            caption=results_message, reply_markup=application)



@dp.callback_query_handler(text_contains='answer_', state=TestState.waiting_for_answer)
async def handle_answer(call: types.CallbackQuery, state: FSMContext):
    answer_data = call.data.split('_')
    question_index = int(answer_data[1])
    answer_value = answer_data[2]

    user_data = await state.get_data()
    answers = user_data.get("answers", [])
    answers.append({question_index: answer_value})

    await state.update_data(answers=answers, current_question_index=question_index + 1)

    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass

    await send_question(call.message, state, answers, id=call.from_user.id)

    # print(answers[-1])   


@dp.callback_query_handler(text='application', state=None)
async def application_handler(call: types.CallbackQuery, state=None):
    await call.message.answer("Sizga qulay bo‚Äôlgan filialni tanlangüìç", reply_markup=filials)
    await state.set_state(ApplicationState.filial)


@dp.callback_query_handler(text=['yunusobod', 'tinchlik', 'chilonzor', 'sergeli'], state=ApplicationState.filial)
async def application_handler(call: types.CallbackQuery, state: FSMContext):
    filial = call.data
    user_data = await state.get_data()
    phone = user_data.get('phone')
    full_name = user_data.get('full_name')
    age = user_data.get('age')
    result = user_data.get('result')
    username = call.from_user.username
    date = datetime.datetime.now()

    user = f"Phone: {phone}\nFull name: {full_name}\nUsername: @{username}\nAge: {age}\nResult: {result}\nFilial: {filial}\nDate: {date}"

    await call.message.delete()
    await call.message.answer("Arizangiz qabul qilindi ‚úÖ \n\nBiz tez orada sizga aloqaga chiqamizüìû",
                            reply_markup=contact)
    await state.finish()
    await on_startup_notify(dp, user)


@dp.callback_query_handler(text='contact')
async def contact_state_handler(call: types.CallbackQuery):
    await call.message.answer("""üìû‚ÄúMars IT‚Äù aloqa raqami 78 777 77 57

üí¨ Biz bilan bog‚Äôlanish @mars_edu_admin

üåê Telegram kanal: @mars_it_school""")


#######################################################################################################  
# Russian
#######################################################################################################


async def save_message_id(state: FSMContext, message: types.Message):
    async with state.proxy() as data:
        if 'message_ids' not in data:
            data['message_ids'] = []
        data['message_ids'].append(message.message_id)


@dp.callback_query_handler(text='ru', state=None)
async def uz_state_handler(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    reply = await call.message.answer("–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±\n\n", reply_markup=phone_ru)
    await save_message_id(state, reply)
    await RegStateRu.phone.set()


@dp.message_handler(content_types=types.ContentType.CONTACT, state=RegStateRu.phone)
async def uz_phone_state(message: types.Message, state=FSMContext):
    phone = message.contact.phone_number

    await state.update_data(
        {'phone': phone}
    )
    reply = await message.answer("–ò–º—è –∏ –§–∞–º–∏–ª–∏—è —Ä–µ–±–µ–Ω–∫–∞ üë®‚Äçüë®‚Äçüëß \n\n", reply_markup=ReplyKeyboardRemove())
    await save_message_id(state, reply)
    await save_message_id(state, message)
    await RegStateRu.next()


@dp.message_handler(state=RegStateRu.fullname)
async def us_fullname_state(message: types.Message, state=FSMContext):
    fullname = message.text

    await state.update_data(
        {'full_name': fullname}
    )
    reply = await message.answer("–í–æ–∑—Ä–∞—Å—Ç –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞üë´ \n\n–ü—Ä–∏–º–µ—Ä 14\n")
    await save_message_id(state, reply)
    await save_message_id(state, message)
    await RegStateRu.age.set()


@dp.message_handler(state=RegStateRu.age)
async def us_fullname_state(message: types.Message, state=FSMContext):
    try:
        age = int(message.text)

        data = await state.update_data(
            {'age': age}
        )
        await save_message_id(state, message)

        data = await state.get_data()
        phone = data.get('phone')
        full_name = data.get('full_name')
        age = data.get('age')
        
        await state.reset_state(with_data=False)

        message_ids = data.get('message_ids', [])
        for message_id in message_ids:
            try:
                await dp.bot.delete_message(message.from_user.id, message_id)
            except Exception as e:
                print(f"Xabarni o'chirishda xato: {e}")
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üòä")
        await message.answer(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n\n–ò–º—è –∏ –§–∞–º–∏–ª–∏—è: {full_name}\n\n–í–æ–∑—Ä–∞—Å—Ç: {age}")

        await message.answer_photo(
            photo="AgACAgIAAxkBAAIIIGYFEeXP2H0XOmOusUutrf0DQptxAAI71TEbfGQpSBomsz22M-_jAQADAgADcwADNAQ",
            caption="–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ IT —É –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –µ—Å—Ç—å –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏?ü§î\n\n",
            reply_markup=start_test_ru)


    except Exception as e:
        print(e)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–∑—Ä–∞—Å—Çüë®‚Äçüë©‚Äçüë¶:\n\n–ü—Ä–∏–º–µ—Ä 14")


@dp.callback_query_handler(text='start_test_ru', state=None)
async def start_test_ru_handler(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(TestStateRu.waiting_for_answer)
    await state.update_data(current_question_index=0, answers=[])
    await call.message.delete()
    await send_question_ru(call.message, state, answers=None, id=call.from_user.id)


async def send_question_ru(message: types.Message, state: FSMContext, answers: list, id):
    user_data = await state.get_data()
    current_question_index = user_data.get("current_question_index", 0)
    questions = list(test_ru.keys())

    if current_question_index < len(questions):
        question = questions[current_question_index]
        options = test_ru[question]

        markup_ru = InlineKeyboardMarkup()
        for option, value in options.items():
            callback_data = f"answer_{current_question_index}_{value}"
            markup_ru.add(InlineKeyboardButton(option, callback_data=callback_data))

        await message.answer(f"–í–æ–ø—Ä–æ—Å {current_question_index + 1} \n\n{question}\n\n", reply_markup=markup_ru)
    else:
        await state.reset_state(with_data=False)
        categories = {'Dizayn': 0, 'Frontend': 0, 'Backend': 0, 'Fullstack': 0}
        for answer in answers:
            for value in answer.values():
                if value in categories:
                    categories[value] += 1

        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        results_message = """–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Çü•≥

–ü–æ –≤–∞—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥—É—Ç –∫—É—Ä—Å—ã:\n\n"""
        result = ""
        a = 95
        b = 100
        for category, count in sorted_categories:
            result += f"{category}:{count}ta,"
            
        await state.update_data(
            {'result': result}
        )

        for category, count in sorted_categories:
            if category == "Backend":
                results_message += f"‚öôÔ∏è –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {category} - {random.randint(a, b)}%\n\n"
            elif category == "Frontend":
                results_message += f"üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {category} - {random.randint(a, b)}%\n\n"
            elif category == "Fullstack":
                results_message += f"üòé –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ {category}  (backend + Frontend) - {random.randint(a, b)}%\n\n"
            elif category == "Dizayn":
                results_message += f"üßë‚Äçüé®–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω - {random.randint(a, b)}%\n\n"

            a -= 5
            b -= 5

        # Natijalarni foydalanuvchiga yuborish
        await message.answer_photo(
            photo="AgACAgIAAxkBAAIIImYFEpV7blhrRZg1PYGkjVMn-ajaAAI91TEbfGQpSCTfeMCLWVVBAQADAgADcwADNAQ",
            caption=results_message, reply_markup=application_ru)



@dp.callback_query_handler(text_contains='answer_', state=TestStateRu.waiting_for_answer)
async def handle_answer(call: types.CallbackQuery, state: FSMContext):
    answer_data = call.data.split('_')
    question_index = int(answer_data[1])
    answer_value = answer_data[2]

    user_data = await state.get_data()
    answers = user_data.get("answers", [])
    answers.append({question_index: answer_value})

    await state.update_data(answers=answers, current_question_index=question_index + 1)

    # await asyncio.sleep(1)  # 1 soniya kutish
    try:
        await call.message.delete()
    except MessageToDeleteNotFound:
        pass

    await send_question_ru(call.message, state, answers, id=call.from_user.id)


@dp.callback_query_handler(text='application_ru')
async def application_handler(call: types.CallbackQuery, state=None):
    # await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Ñ–∏–ª–∏–∞–ªüìç", reply_markup=filials_ru)
    await ApplicationStateRu.filial.set()


@dp.callback_query_handler(text=['yunusobod', 'tinchlik', 'chilonzor', 'sergeli'], state=ApplicationStateRu.filial)
async def application_handler(call: types.CallbackQuery, state: FSMContext):
    filial = call.data
    user_data = await state.get_data()
    phone = user_data.get('phone')
    full_name = user_data.get('full_name')
    age = user_data.get('age')
    result = user_data.get('result')
    username = call.from_user.username
    date = datetime.datetime.now()

    user = f"Phone: {phone}\nFull name: {full_name}\nUsername: @{username}\nAge: {age}\nResult: {result}\nFilial: {filial}\nDate: {date}"

    await call.message.delete()
    await call.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ \n\n–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è üìû", reply_markup=contact_ru)
    await state.finish()
    await on_startup_notify(dp, user)


@dp.callback_query_handler(text='contact_ru')
async def contact_state_handler(call: types.CallbackQuery):
    await call.message.answer("""üìû–ù–æ–º–µ—Ä ‚ÄúMars IT‚Äù 78 777 77 57

üë©‚Äçüíª–ß–∞—Ç —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @mars_edu_admin

üåê–ù–∞—à –∫–∞–Ω–∞–ª: @mars_it_school""")
